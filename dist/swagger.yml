openapi: 3.0.0
info:
  title: Project LC documentation for APIs
  version: 0.1.0
  description: Endpoints are allows to interact with the Project LC
paths:
  '/billing/webhook/:secret':
    post:
      tags:
        - Billing
      summary: Billing webhook
      responses:
        '200':
          description: ''
  /meta/health:
    get:
      tags:
        - Meta
      summary: Services status
      operationId: metaStatus
      responses:
        '200':
          description: Server is running
  /meta/build:
    get:
      tags:
        - Meta
      summary: Meta build
      operationId: metaBuild
      responses:
        '200':
          description: Build information
  /metadata:
    get:
      tags:
        - Metadata
      summary: Gets app metadata
      operationId: getMetadata
      responses:
        '200':
          description: App metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  serviceTypes:
                    type: array
                    item:
                      $ref: '#/components/schemas/DictionaryMetadata'
                  industry:
                    type: array
                    item:
                      $ref: '#/components/schemas/DictionaryMetadata'
                  office:
                    type: array
                    item:
                      $ref: '#/components/schemas/DictionaryMetadata'
                  region:
                    type: array
                    item:
                      $ref: '#/components/schemas/DictionaryMetadata'
                  pitchDeck:
                    type: array
                    item:
                      $ref: '#/components/schemas/DictionaryMetadata'
  /upload/get-upload-url:
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Upload
      summary: Get presigned url
      operationId: uploadGetPresignedUrl
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadGetPresignedUrlBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadGetPresignedUrlResponse'
  /upload/multipart/start:
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Upload
      summary: Init multipart upload
      operationId: uploadMutilpartStart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadMultipartStartBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadMultipartStartResponse'
  /upload/multipart/get-upload-url:
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Upload
      summary: Get upload url for multipart
      description: >-
        Attention (!). Uploading to received URL should return ETag in headers.
        Save it along with partNumber for sending to /upload/multipart/complete.
      operationId: uploadMutilpartGetUploadUrl
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadMultipartGetUploadUrlBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadMultipartGetUploadUrlResponse'
  /upload/multipart/complete:
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Upload
      summary: Complete multipart upload
      operationId: uploadMutipartComplete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadMultipartCompleteBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadMultipartCompleteResponse'
  /albums:
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Albums
      summary: Returns array of albums of the specified user.
      description:
        $ref: '#/components/descriptions/AlbumsAdditionalPathsList'
      operationId: albumsGetList
      parameters:
        - in: path
          name: userId
          description: 'user _id to filter the list by owner, you can use ''me'' placeholder'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: returns albums
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlbumModelResponseList'
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Albums
      summary: Creates an album
      description:
        $ref: '#/components/descriptions/AlbumsAdditionalPathsList'
      operationId: albumsCreate
      parameters:
        - in: path
          name: userId
          description: 'user _id to create an album for, you can use ''me'' placeholder'
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/AlbumModel'
      responses:
        '201':
          description: returns created album
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/AlbumModelResponseCreated'
  '/albums/{_id}':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Albums
      summary: Returns album by _id.
      description:
        $ref: '#/components/descriptions/AlbumsAdditionalPathsOne'
      operationId: albumsGetOne
      parameters:
        - in: path
          name: _id
          description: album _id
          schema:
            type: string
          required: true
        - in: path
          name: userId
          description: 'owner user ID to filter by, you can use ''me'' placeholder.'
          schema:
            type: string
          required: false
      responses:
        '200':
          description: returns album by _id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/AlbumModelResponseList'
    patch:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Albums
      summary: Updates album by _id
      description:
        $ref: '#/components/descriptions/AlbumsAdditionalPathsOne'
      operationId: albumsUpdate
      parameters:
        - in: path
          name: userId
          description: 'user _id, you can use ''me'' placeholder'
          required: false
          schema:
            type: string
        - in: path
          name: _id
          description: album _id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/AlbumModel'
      responses:
        '200':
          description: returns updated album
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/AlbumModelResponseList'
    delete:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Albums
      summary: Removes album by _id. Album must be owned by user it he's not an admin.
      description:
        $ref: '#/components/descriptions/AlbumsAdditionalPathsOne'
      operationId: albumsUpdateDelete
      parameters:
        - in: path
          name: userId
          description: 'user _id, you can use ''me'' placeholder'
          required: false
          schema:
            type: string
        - in: path
          name: _id
          description: album _id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Empty response
  '/albums/{_id}/purchase':
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Albums
      summary: Purchases an album
      description:
        $ref: '#/components/descriptions/AlbumsAdditionalPathsList'
      operationId: albumsPurchase
      parameters:
        - in: path
          name: _id
          description: album id
      responses:
        '200':
          description: returns sum
          content:
            application/json:
              schema:
                type: object
                properties:
                  sum:
                    type: number
  '/albums/{userId}/favorited':
    get:
      tags:
        - Albums
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: get user's favorite albums
      operationId: findFavoriteAlbumsForUser
      parameters:
        - name: userId
          description: 'user _id, ''me'' accepted too'
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return a list of albums objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlbumModelResponseList'
  '/albums/{albumId}/favorites':
    get:
      tags:
        - Albums
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: get users who added album to favorites
      operationId: GetAlbumUsersInFavorites
      parameters:
        - name: albumId
          description: album _id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return a list of users object
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    username:
                      type: string
                    type:
                      type: string
  '/albums/{albumId}/favorites/{userId}':
    put:
      tags:
        - Albums
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: put to favorites
      operationId: AddAlbumToFavorites
      parameters:
        - name: userId
          description: 'user _id, ''me'' accepted too'
          in: path
          required: true
          schema:
            type: string
        - name: albumId
          description: album _id
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: return a list of users who added album to favorites
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    username:
                      type: string
                    type:
                      type: string
    delete:
      tags:
        - Albums
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: delete from favorites
      operationId: DeleteAlbumFromFavorites
      parameters:
        - name: userId
          description: 'user _id, ''me'' accepted too'
          in: path
          required: true
          schema:
            type: string
        - name: albumId
          description: album _id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Empty response
  '/albums/{albumId}/inc/viewsCounter':
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Albums
      summary: Increments views counter for a photo
      operationId: increaseAlbumViewsCounter
      parameters:
        - in: path
          name: albumId
          description: album _id
          required: true
          schema:
            type: string
            description: album _id
      responses:
        '204':
          description: Empty response
  '/admin/albums/{id}/ban':
    post:
      tags:
        - Albums
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: ban album by id
      operationId: albumsBan
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: album id.
      responses:
        '204':
          description: Empty response
  '/admin/albums/{id}/unban':
    post:
      tags:
        - Albums
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: unban album by id
      operationId: albumsUnban
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: album id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                banningReasonType:
                  type: string
                  enum:
                    - abuse
                    - nudity
                    - spam
                banningReasonDescription:
                  type: string
      responses:
        '204':
          description: Empty response
  '/balance-records/{_id}':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - BalanceRecords
      summary: Returns balanceRecord by id
      operationId: getBalanceRecord
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: returns notification by _id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/BalanceRecordResponse'
  '/users/{userId}/balance-records':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - BalanceRecords
      summary: Returns array of balanceRecords of the specified user
      operationId: getBalanceRecords
      parameters:
        - in: path
          name: userId
          description: 'userId, ''me'' accepted too'
          required: true
          schema:
            type: string
            description: 'userId, ''me'' accepted too'
      responses:
        '200':
          description: returns users's balanceRecords
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BalanceRecordResponse'
  '/chats/{_id}':
    get:
      deprecated: true
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Chats
      summary: Returns chat by id. Regular users can get only own chats.
      operationId: getChat
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: returns chat by _id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ChatResponse'
  '/users/{user}/chats':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Chats
      summary: Returns array of chats of the specified user.
      operationId: getUserChats
      parameters:
        - in: path
          name: user
          description: 'user id, you can use "me" shortcut'
          required: true
          schema:
            type: string
            description: 'user id, you can use "me" shortcut'
      responses:
        '200':
          description: returns user's chats
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ChatResponseWithUnread'
  '/users/{user}/chats/count':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Chats
      summary: Returns count of chats of the specified user
      operationId: getUserChatsCount
      parameters:
        - in: path
          name: user
          description: 'user id, you can use "me" shortcut'
          required: true
          schema:
            type: string
            description: 'user id, you can use "me" shortcut'
      responses:
        '200':
          description: returns count of user's chats
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
  '/users/{user}/chats/{chatType}/with/{typeParam}':
    put:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Chats
      summary: >
        Opens chat between user and interlocutor, initiated by user. If chat
        does not exist, creates new instance, otherwise returns existing one.
      operationId: getUserChat
      parameters:
        - in: path
          name: user
          description: 'ID of user, ''me'' placeholder can be used'
          required: true
          schema:
            type: string
            description: 'ID of user, ''me'' placeholder can be used'
        - in: path
          name: chatType
          description: Chat Type
          required: true
          schema:
            type: string
            description: 'Chat Type"&#58;" private, liveStream'
        - in: path
          name: typeParam
          description: Chat Type Param
          required: true
          schema:
            type: string
            description: >
              Chat Type Param"&#58;" private - ID of other user, liveStream - ID
              of liveStream
      responses:
        '200':
          description: returns new initiated chat
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ChatResponse'
    delete:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Chats
      summary: >
        Removes chat between user and interlocutor, initiated by user. If chat
        does not exist, creates new instance, otherwise returns existing one.
      operationId: deleteUserChat
      parameters:
        - in: path
          name: user
          description: 'ID of user, ''me'' placeholder can be used'
          required: true
          schema:
            type: string
            description: 'ID of user, ''me'' placeholder can be used'
        - in: path
          name: typeParam
          description: Chat Type Param
          required: true
          schema:
            type: string
            description: >
              Chat Type Param"&#58;" private - ID of other user, liveStream - ID
              of liveStream
      responses:
        '204':
          description: Empty response
  '/live-streams/{liveStreamId}/comments':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Comments
      summary: Returns comments by livestream _id
      operationId: getCommentByLivestreamId
      parameters:
        - in: path
          name: liveStreamId
          description: livestream _id
          required: true
          schema:
            type: string
            description: livestream _id
      responses:
        '200':
          description: returns comments for livestream _id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentModelResponse'
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Comments
      summary: Creates comment for livestream
      operationId: createCommentByLivestreamId
      parameters:
        - in: path
          name: liveStreamId
          description: livestream _id
          required: true
          schema:
            type: string
            description: livestream _id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/CommentModel'
      responses:
        '201':
          description: returns created comment
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/CommentModelResponseCreated'
  '/live-streams/{liveStreamId}/comments/{commentId}':
    patch:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Comments
      summary: Updates comment by _id
      operationId: updateCommentById
      parameters:
        - in: path
          name: liveStreamId
          description: livestream _id
          required: true
          schema:
            type: string
            description: livestream _id
        - in: path
          name: commentId
          description: comment _id
          required: true
          schema:
            type: string
            description: comment _id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/CommentModel'
      responses:
        '200':
          description: returns updated comment
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/CommentModelResponse'
    delete:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Comments
      summary: Removes comment of current livestream
      operationId: deleteCommentFromUser
      parameters:
        - in: path
          name: liveStreamId
          description: livestream _id
          required: true
          schema:
            type: string
            description: livestream _id
        - in: path
          name: commentId
          description: comment _id
          required: true
          schema:
            type: string
            description: comment _id
      responses:
        '204':
          description: Empty response
  '/users/{userId}/feedbacks':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Feedbacks
      summary: List all feedbacks
      operationId: feedbacksList
      parameters:
        - in: path
          name: userId
          description: 'user _id, ''me'' accepted too'
          required: true
          schema:
            type: string
            description: user _id
      responses:
        '200':
          description: return an array of feedback objects for user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeedbackModelResponse'
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Feedbacks
      summary: Creates feedback
      operationId: createFeedback
      parameters:
        - in: path
          name: userId
          description: 'user _id, ''me'' accepted too'
          required: true
          schema:
            type: string
            description: user _id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/FeedbackModel'
      responses:
        '201':
          description: returns updated feedback
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/FeedbackModelResponseCreated'
  '/users/{userId}/feedbacks/{feedbackId}':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Feedbacks
      summary: Returns feedback by _id
      operationId: getFeedbackById
      parameters:
        - in: path
          name: userId
          description: 'user _id, ''me'' accepted too'
          required: true
          schema:
            type: string
            description: user _id
        - in: path
          name: feedbackId
          description: feedback _id
          required: true
          schema:
            type: string
            description: feedback _id
      responses:
        '200':
          description: returns feedbacks for feedback _id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/FeedbackModelResponse'
  '/live-streams/{liveStreamId}/goals':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Goals
      summary: List all goals
      operationId: goalsList
      parameters:
        - in: path
          name: liveStreamId
          description: liveStream _id
          required: true
          schema:
            type: string
            description: liveStream _id
      responses:
        '200':
          description: return an array of goal objects for liveStream
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GoalModelResponse'
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Goals
      summary: Creates goal for liveStream
      operationId: createGoal
      parameters:
        - in: path
          name: liveStreamId
          description: liveStream _id
          required: true
          schema:
            type: string
            description: liveStream _id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/GoalModel'
      responses:
        '201':
          description: returns updated goal
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GoalModelResponseCreated'
  '/live-streams/{liveStreamId}/goals/{goalId}':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Goals
      summary: Returns goal by _id
      operationId: getGoalById
      parameters:
        - in: path
          name: liveStreamId
          description: liveStream _id
          required: true
          schema:
            type: string
            description: liveStream _id
        - in: path
          name: goalId
          description: goal _id
          required: true
          schema:
            type: string
            description: goal _id
      responses:
        '200':
          description: returns goals for goal _id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GoalModelResponse'
    patch:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Goals
      summary: Updates goal by _id
      operationId: updateGoalById
      parameters:
        - in: path
          name: liveStreamId
          description: 'liveStream _id, ''me'' accepted too'
          required: true
          schema:
            type: string
            description: liveStream _id
        - in: path
          name: goalId
          description: goal _id
          required: true
          schema:
            type: string
            description: goal _id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/GoalModel'
      responses:
        '200':
          description: returns updated goal
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GoalModelResponse'
    delete:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Goals
      summary: Removes goal of current liveStream
      operationId: deleteGoalFromLiveStream
      parameters:
        - in: path
          name: liveStreamId
          description: liveStream _id
          required: true
          schema:
            type: string
            description: liveStream _id
        - in: path
          name: goalId
          description: goal _id
          required: true
          schema:
            type: string
            description: goal _id
      responses:
        '204':
          description: Empty response
  '/live-streams/{liveStreamId}/goals/{goalId}/{state}':
    put:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Goals
      summary: Set goal status
      operationId: setGoalStatus
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
        - in: path
          name: goalId
          description: goal _id
          required: true
          schema:
            type: string
            description: goal _id
        - in: path
          name: state
          schema:
            type: string
            enum:
              - cancel
              - complete
          required: true
      responses:
        '200':
          description: return updated goal object
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/GoalModelResponse'
  '/live-streams/{liveStreamId}/goals/{goalId}/tips':
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Goals
      summary: Send a tip
      operationId: sendTipToGoal
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
        - in: path
          name: goalId
          description: goal _id
          required: true
          schema:
            type: string
            description: goal _id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sum:
                  type: number
      responses:
        '200':
          description: return sum
          content:
            application/json:
              schema:
                type: object
                properties:
                  sum:
                    type: number
  '/live-streams/{_id}':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - LiveStreams
      summary: Returns live-stream by _id
      operationId: getLiveStreams
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: returns live-stream by _id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/LiveStreamModelResponseList'
  '/users/{userId}/live-streams':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - LiveStreams
      summary: Returns array of live-streams of the specified user
      operationId: getUserLiveStreams
      parameters:
        - in: path
          name: userId
          description: 'user _id, ''me'' accepted too'
          required: true
          schema:
            type: string
            description: 'user _id, ''me'' accepted too'
      responses:
        '200':
          description: returns user's live-streams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LiveStreamModelResponseList'
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - LiveStreams
      summary: Creates a live-stream
      operationId: createLiveStream
      parameters:
        - in: path
          name: userId
          description: 'user _id, ''me'' accepted too'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/LiveStreamModel'
      responses:
        '201':
          description: returns created live-streams
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/LiveStreamModelResponseCreated'
  '/users/{userId}/live-streams/{liveStreamId}':
    patch:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - LiveStreams
      summary: Updates live-stream by _id
      operationId: updateLiveStream
      parameters:
        - in: path
          name: userId
          description: 'user _id, ''me'' accepted too'
          required: true
          schema:
            type: string
            description: 'user _id, ''me'' accepted too'
        - in: path
          name: liveStreamId
          description: liveStream _id
          required: true
          schema:
            type: string
            description: liveStream _id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/LiveStreamModel'
      responses:
        '200':
          description: returns updated live-streams
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/LiveStreamModelResponseList'
    delete:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - LiveStreams
      summary: Removes live-stream by _id. Live-stream must be owned by user or admin
      operationId: deleteUserLiveStream
      parameters:
        - in: path
          name: userId
          description: 'user _id, ''me'' accepted too'
          required: true
          schema:
            type: string
            description: 'user _id, ''me'' accepted too'
        - in: path
          name: liveStreamId
          description: liveStream _id
          required: true
          schema:
            type: string
            description: liveStream _id
      responses:
        '204':
          description: Empty response
  '/live-streams/{livestreamId}/liked-users':
    get:
      tags:
        - LiveStreams
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: get liked users
      operationId: GetLikedUsers
      parameters:
        - name: livestreamId
          description: liveStream _id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return a user object
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    username:
                      type: string
                    type:
                      type: string
  '/live-streams/{livestreamId}/liked-users/{userId}':
    put:
      tags:
        - LiveStreams
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: put liked users
      operationId: PutLikedUsers
      parameters:
        - name: livestreamId
          description: liveStream _id
          in: path
          required: true
          schema:
            type: string
        - name: userId
          description: 'user _id, ''me'' accepted too'
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: return a list of liked users ids
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    username:
                      type: string
                    type:
                      type: string
    delete:
      tags:
        - LiveStreams
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: delete liked users
      operationId: DeleteLikedUsers
      parameters:
        - name: livestreamId
          description: liveStream _id
          in: path
          required: true
          schema:
            type: string
        - name: userId
          description: 'user _id, ''me'' accepted too'
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Empty response
  '/live-streams/{userId}/favorited':
    get:
      tags:
        - LiveStreams
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: get user's favorites livestreams
      operationId: findFavoriteLiveStreamsForUser
      parameters:
        - name: userId
          description: 'user _id, ''me'' accepted too'
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return a list of liveStreams objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LiveStreamModelResponseList'
  '/live-streams/{livestreamId}/favorites':
    get:
      tags:
        - LiveStreams
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: get users who added to favorites
      operationId: GetLiveStreamUsersInFavorites
      parameters:
        - name: livestreamId
          description: liveStream _id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return a list of users object
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    username:
                      type: string
                    type:
                      type: string
  '/live-streams/{livestreamId}/favorites/{userId}':
    put:
      tags:
        - LiveStreams
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: put to favorites
      operationId: AddLiveStreamToFavorites
      parameters:
        - name: livestreamId
          description: liveStream _id
          in: path
          required: true
          schema:
            type: string
        - name: userId
          description: 'user _id, ''me'' accepted too'
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: return a list of users who added liveStream to favorites
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    username:
                      type: string
                    type:
                      type: string
    delete:
      tags:
        - LiveStreams
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: delete from favorites
      operationId: DeleteLiveStreamFromFavorites
      parameters:
        - name: livestreamId
          description: liveStream _id
          in: path
          required: true
          schema:
            type: string
        - name: userId
          description: 'user _id, ''me'' accepted too'
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Empty response
  '/live-streams/{_id}/purchase':
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - LiveStreams
      summary: Purchases a liveStream
      operationId: liveStreamsPurchase
      parameters:
        - in: path
          name: _id
          description: liveStream id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: returns sum
          content:
            application/json:
              schema:
                type: object
                properties:
                  sum:
                    type: number
  '/live-streams/{liveStreamId}/schedule':
    put:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - LiveStreams
      summary: Schedules the live stream
      operationId: scheduleLiveStream
      parameters:
        - in: path
          name: liveStreamId
          description: live stream _id
          required: true
          schema:
            type: string
            description: live stream _id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                scheduledStartingAt:
                  type: string
                  description: Planning start time
              required:
                - url
      responses:
        '200':
          description: LiveStream Resource
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/LiveStreamModelResponseList'
  '/live-streams/{liveStreamId}/start':
    put:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - LiveStreams
      summary: Starts the live stream
      operationId: startLiveStream
      parameters:
        - in: path
          name: liveStreamId
          description: live stream _id
          required: true
          schema:
            type: string
            description: live stream _id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  description: liveStream url
              required:
                - url
      responses:
        '200':
          description: LiveStream Resource
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/LiveStreamModelResponseList'
  '/live-streams/{liveStreamId}/stop':
    put:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - LiveStreams
      summary: Stops the live stream
      operationId: stopLiveStream
      parameters:
        - in: path
          name: liveStreamId
          description: live stream _id
          required: true
          schema:
            type: string
            description: live stream _id
      responses:
        '200':
          description: LiveStream Resource
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/LiveStreamModelResponseList'
  '/live-streams/{liveStreamId}/inc/viewsCounter':
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - LiveStreams
      summary: Increments views counter for a live stream
      operationId: increaseLiveStreamViewsCounter
      parameters:
        - in: path
          name: liveStreamId
          description: live stream _id
          required: true
          schema:
            type: string
            description: live stream _id
      responses:
        '204':
          description: Empty response
  '/chats/{chat}/messages':
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Messages
      summary: Creates a message
      operationId: createMessage
      parameters:
        - in: path
          name: chat
          description: chat _id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: message body
              required:
                - body
      responses:
        '201':
          description: returns created message
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ChatMessageResponse'
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Messages
      summary: Returns array of message of the chat.
      operationId: getChatMessages
      parameters:
        - in: path
          name: chat
          description: chat _id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns array of message of the chat.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatMessageResponse'
  '/chats/{chat}/messages/{_id}':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Messages
      summary: Returns message by id.
      operationId: getMessageById
      parameters:
        - in: path
          name: chat
          description: chat _id
          required: true
          schema:
            type: string
            description: chat _id
        - in: path
          name: _id
          description: message _id
          required: true
          schema:
            type: string
            description: message _id
      responses:
        '200':
          description: returns user's chats
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ChatMessageResponse'
    patch:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Messages
      summary: Updates message by id.
      operationId: updateMessageById
      parameters:
        - in: path
          name: chat
          description: chat _id
          required: true
          schema:
            type: string
            description: chat _id
        - in: path
          name: _id
          description: message _id
          required: true
          schema:
            type: string
            description: message _id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: message body
              required:
                - body
      responses:
        '200':
          description: returns updated chat
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ChatMessageResponse'
  '/chats/{chat}/messages/unread':
    delete:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Messages
      summary: Removes current user from unread users of all messages of this chat
      operationId: makeAllRead
      parameters:
        - in: path
          name: chat
          description: chat _id
          required: true
          schema:
            type: string
            description: chat _id
      responses:
        '204':
          description: Empty response
  '/chats/{chat}/messages/{_id}/unread':
    delete:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Messages
      summary: Removes current user from unread users of message
      operationId: makeMessageRead
      parameters:
        - in: path
          name: chat
          description: chat _id
          required: true
          schema:
            type: string
            description: chat _id
        - in: path
          name: _id
          description: message _id
          required: true
          schema:
            type: string
            description: message _id
      responses:
        '204':
          description: Empty response
  '/admin/messages/{id}/ban':
    post:
      tags:
        - Messages
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: ban video by id
      operationId: videosBan
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: video id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                banningReasonType:
                  type: string
                  enum:
                    - abuse
                    - nudity
                    - spam
                banningReasonDescription:
                  type: string
      responses:
        '204':
          description: Empty response
  '/admin/messages/{id}/unban':
    post:
      tags:
        - Messages
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: unban video by id
      operationId: videosUnban
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: video id.
      responses:
        '204':
          description: Empty response
  '/notifications/{_id}':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Notifications
      summary: Returns notification by id
      operationId: getNotifications
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: returns notification by _id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/NotificationModelResponse'
  '/users/{userId}/notifications':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Notifications
      summary: Returns array of notifications of the specified user
      operationId: getUserNotifications
      parameters:
        - in: path
          name: userId
          description: 'userId, ''me'' accepted too'
          required: true
          schema:
            type: string
            description: 'userId, ''me'' accepted too'
      responses:
        '200':
          description: returns users's notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationModelResponse'
  '/users/{userId}/notifications/{notificationId}':
    delete:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Notifications
      summary: Marks Notification by notificationId as read
      operationId: markReadUserNotification
      parameters:
        - in: path
          name: userId
          description: 'userId, ''me'' accepted too'
          required: true
          schema:
            type: string
            description: 'userId, ''me'' accepted too'
        - in: path
          name: notificationId
          description: notification _id
          required: true
          schema:
            type: string
            description: notification _id
      responses:
        '204':
          description: Empty response
  /photos:
    post:
      deprecated: true
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Photos
      summary: Creates photo without album
      operationId: createPhotoWithoutAlbum
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/PhotoModel'
      responses:
        '200':
          description: returns created photo
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PhotoModelResponse'
  '/photos/{_id}':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Photos
      summary: Returns photo by _id
      operationId: getPhotos
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: returns photo by _id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PhotoModelResponse'
  '/albums/{albumId}/photos':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Photos
      summary: Returns array of photos of the specified album
      operationId: getUserPhotos
      parameters:
        - in: path
          name: albumId
          description: album _id
          required: true
          schema:
            type: string
            description: album _id
      responses:
        '200':
          description: returns album's photos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhotoModelResponse'
    post:
      deprecated: true
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Photos
      summary: Creates a photo in certain album
      operationId: createPhoto
      parameters:
        - in: path
          name: album
          description: album _id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/PhotoModel'
      responses:
        '200':
          description: returns created photo
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PhotoModelResponse'
  '/albums/{albumId}/photos/{photoId}':
    patch:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Photos
      summary: Updates photo by _id
      operationId: updatePhoto
      parameters:
        - in: path
          name: albumId
          description: album _id
          required: true
          schema:
            type: string
            description: album _id
        - in: path
          name: photoId
          description: photo _id
          required: true
          schema:
            type: string
            description: photo _id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/PhotoModel'
      responses:
        '200':
          description: returns updated photo
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PhotoModelResponse'
    delete:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Photos
      summary: Removes photo by _id. Photo must be owned by user or admin
      operationId: deleteUserPhoto
      parameters:
        - in: path
          name: album
          description: album _id
          required: true
          schema:
            type: string
            description: album _id
        - in: path
          name: photoId
          description: photo _id
          required: true
          schema:
            type: string
            description: photo _id
      responses:
        '204':
          description: Empty response
  '/photos/{userId}/favorited':
    get:
      tags:
        - Photos
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: get user's favorite photos
      operationId: findFavoritePhotosForUser
      parameters:
        - name: userId
          description: 'user _id, ''me'' accepted too'
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return a list of photos objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhotoModelResponse'
  '/photos/{photoId}/favorites':
    get:
      tags:
        - Photos
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: get users who added photo to favorites
      operationId: GetPhotoUsersInFavorites
      parameters:
        - name: photoId
          description: photo _id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return a list of users object
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    username:
                      type: string
                    type:
                      type: string
  '/photos/{photoId}/favorites/{userId}':
    put:
      tags:
        - Photos
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: put to favorites
      operationId: AddPhotoToFavorites
      parameters:
        - name: photoId
          description: photo _id
          in: path
          required: true
          schema:
            type: string
        - name: userId
          description: 'user _id, ''me'' accepted too'
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: return a list of users who added photo to favorites
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    username:
                      type: string
                    type:
                      type: string
    delete:
      tags:
        - Photos
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: delete from favorites
      operationId: DeletePhotoFromFavorites
      parameters:
        - name: photoId
          description: photo _id
          in: path
          required: true
          schema:
            type: string
        - name: userId
          description: 'user _id, ''me'' accepted too'
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Empty response
  '/photos/{photoId}/':
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Photos
      summary: Increments views counter for a photo
      operationId: increasePhotoViewsCounter
      parameters:
        - in: path
          name: photoId
          description: photo _id
          required: true
          schema:
            type: string
            description: photo _id
      responses:
        '204':
          description: Empty response
  '/admin/photos/{id}/ban':
    post:
      tags:
        - Photos
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: ban photo by id
      operationId: photosBan
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: photo id.
      responses:
        '204':
          description: Empty response
  '/admin/photos/{id}/unban':
    post:
      tags:
        - Photos
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: unban photo by id
      operationId: photosUnban
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: photo id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                banningReasonType:
                  type: string
                  enum:
                    - abuse
                    - nudity
                    - spam
                banningReasonDescription:
                  type: string
      responses:
        '204':
          description: Empty response
  /reports:
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Reports
      summary: List all reports
      operationId: reportsList
      responses:
        '200':
          description: return an array of report objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportModelResponse'
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Reports
      summary: Create report
      operationId: createReport
      requestBody:
        description: object containing the properties to create report
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportModel'
      responses:
        '201':
          description: return created report object
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/ReportModelResponse'
  '/reports/{_id}':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Reports
      summary: Returns report by _id
      operationId: getReports
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: returns report by _id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ReportModelResponse'
  '/users/{userId}/reports/{reportId}':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Reports
      summary: Returns report by _id
      operationId: getReportById
      parameters:
        - in: path
          name: userId
          description: user _id
          required: true
          schema:
            type: string
            description: user _id
        - in: path
          name: reportId
          description: report _id
          required: true
          schema:
            type: string
            description: report _id
      responses:
        '200':
          description: returns reports for user _id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ReportModelResponse'
    patch:
      deprecated: true
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Reports
      summary: Updates report by _id
      operationId: updateReportById
      parameters:
        - in: path
          name: userId
          description: user _id
          required: true
          schema:
            type: string
            description: user _id
        - in: path
          name: reportId
          description: report _id
          required: true
          schema:
            type: string
            description: report _id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/ReportModel'
      responses:
        '200':
          description: returns updated report
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ReportModelResponse'
    delete:
      deprecated: true
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Reports
      summary: Removes report of current user
      operationId: deleteReportFromUser
      parameters:
        - in: path
          name: userId
          description: user _id
          required: true
          schema:
            type: string
            description: user _id
        - in: path
          name: reportId
          description: report _id
          required: true
          schema:
            type: string
            description: report _id
      responses:
        '204':
          description: Empty response
  '/users/{targetUser}/reviews':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Reviews
      summary: List reviews
      operationId: reviewsList
      parameters:
        - in: path
          name: targetUser
          description: 'target user _id, ''me'' placeholder is supported'
          required: true
          schema:
            type: string
            description: user _id
      responses:
        '200':
          description: return an array of review objects for target user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReviewsModelResponse'
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Reviews
      summary: Creates review
      operationId: createReview
      parameters:
        - in: path
          name: targetUser
          description: 'target user _id, ''me'' placeholder is supported'
          required: true
          schema:
            type: string
            description: user _id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/ReviewModel'
      responses:
        '201':
          description: returns created review
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ReviewModelResponseCreated'
  '/reviews/{reviewId}':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Reviews
      summary: Returns review by _id
      operationId: getReviewById
      parameters:
        - in: path
          name: targetUser
          description: 'target user _id, ''me'' placeholder is supported'
          required: true
          schema:
            type: string
            description: user _id
        - in: path
          name: reviewId
          description: review _id
          required: true
          schema:
            type: string
            description: review _id
      responses:
        '200':
          description: returns reviews by review _id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ReviewModelResponse'
  '/rewards/{_id}':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Rewards
      summary: Returns reward by id
      operationId: getRewards
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: returns reward by _id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/RewardModelResponse'
  /rewards:
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Rewards
      summary: Returns array of rewards
      operationId: getRewards
      responses:
        '200':
          description: returns rewards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RewardModelResponse'
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Rewards
      summary: Creates a reward
      operationId: createReward
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/RewardModel'
      responses:
        '201':
          description: returns created Reward
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/RewardModelResponse'
  '/rewards/{rewardId}':
    patch:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Rewards
      summary: Updates reward by _id
      operationId: updateReward
      parameters:
        - in: path
          name: rewardId
          description: Reward _id
          required: true
          schema:
            type: string
            description: Reward _id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/RewardModel'
      responses:
        '200':
          description: returns updated Reward
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/RewardModelResponse'
    delete:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Rewards
      summary: Removes reward by _id
      operationId: deleteReward
      parameters:
        - in: path
          name: rewardId
          description: Reward _id
          required: true
          schema:
            type: string
            description: Reward _id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/RewardModelResponse'
      responses:
        '204':
          description: Empty response
  /strikes:
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Strikes
      summary: List all strikes
      operationId: strikesList
      responses:
        '200':
          description: return an array of strike objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StrikeModelResponseList'
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Strikes
      summary: Create strike
      operationId: createStrike
      requestBody:
        description: object containing the properties to create strike
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StrikeModel'
      responses:
        '201':
          description: return created strike object
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/StrikeModelResponseCreated'
  '/strikes/{_id}':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Strikes
      summary: Returns strike by _id
      operationId: getStrikes
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: returns strike by _id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/StrikeModelResponseList'
  '/strikes/{_id}/{state}':
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Strikes
      summary: Set strike status
      operationId: setStrikeStatus
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
        - in: path
          name: state
          schema:
            type: string
            enum:
              - revoke
              - confirm
          required: true
      responses:
        '200':
          description: return updated strike object
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/StrikeModelResponseList'
  '/users/{userId}/strikes/{strikeId}':
    get:
      deprecated: true
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Strikes
      summary: Returns strike by _id.
      operationId: getStrikeById
      parameters:
        - in: path
          name: userId
          description: user _id
          required: true
          schema:
            type: string
            description: user _id
        - in: path
          name: strikeId
          description: strike _id
          required: true
          schema:
            type: string
            description: strike _id
      responses:
        '200':
          description: returns strikes for user _id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/StrikeModelResponseList'
    patch:
      deprecated: true
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Strikes
      summary: Updates strike by _id.
      operationId: updateStrikeById
      parameters:
        - in: path
          name: userId
          description: user _id
          required: true
          schema:
            type: string
            description: user _id
        - in: path
          name: strikeId
          description: strike _id
          required: true
          schema:
            type: string
            description: strike _id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/StrikeModel'
      responses:
        '200':
          description: returns updated strike
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/StrikeModelResponseList'
    delete:
      deprecated: true
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Strikes
      summary: Removes strike of current user
      operationId: deleteStrikeFromUser
      parameters:
        - in: path
          name: userId
          description: user _id
          required: true
          schema:
            type: string
            description: user _id
        - in: path
          name: strikeId
          description: strike _id
          required: true
          schema:
            type: string
            description: strike _id
      responses:
        '204':
          description: Empty response
  /system-notifications:
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Notifications
      summary: Returns array of system notifications (admins only)
      operationId: getSystemNotifications
      responses:
        '200':
          description: returns users's notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SystemNotificationModelList'
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Notifications
      summary: Returns created system notification (admins only)
      operationId: createSystemNotification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                notificationType:
                  type: string
              required:
                - notificationType
      responses:
        '200':
          description: returns created system notification
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/SystemNotificationModel'
  '/system-notifications/{notificationId}':
    patch:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Notifications
      summary: Updates system notification by notificationId (admins only)
      operationId: updateSystemNotification
      parameters:
        - in: path
          name: notificationId
          description: notification _id
          required: true
          schema:
            type: string
            description: notification _id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                notificationType:
                  type: string
              required:
                - notificationType
      responses:
        '200':
          description: returns updated SystemNotification
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/SystemNotificationModelList'
    delete:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Notifications
      summary: Removes system notification by notificationId (admins only)
      operationId: removeSystemNotification
      parameters:
        - in: path
          name: notificationId
          description: notification _id
          required: true
          schema:
            type: string
            description: notification _id
      responses:
        '204':
          description: Empty response
  /users:
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Users
      summary: List all users
      operationId: usersList
      responses:
        '200':
          description: return an array of user objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserModelResponse'
    post:
      tags:
        - Users
      summary: Create User
      operationId: createUser
      requestBody:
        description: object containing the properties to create user profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserModelRegister'
      responses:
        '201':
          description: return created user object
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/UserModelRegisterResponse'
        '400':
          description: response error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/UserCreationError'
  /users/public:
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Users
      summary: List all users public profiles
      operationId: usersListPublic
      responses:
        '200':
          description: return an array of user objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/publicUser'
  '/users/{userId}/public':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Users
      summary: get user public profile by userId
      operationId: getUserPublicProfile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            description: 'user id, you can use "me" shortcut.'
      responses:
        '200':
          description: return a user object
          content:
            application/json:
              schema:
                type: array
                $ref: '#/components/schemas/publicUser'
  '/users/{userId}':
    get:
      tags:
        - Users
      summary: get user profile by userId
      operationId: getUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            description: 'user id, you can use "me" shortcut.'
      responses:
        '200':
          description: return a user object
          content:
            application/json:
              schema:
                type: array
                $ref: '#/components/schemas/UserModelResponse'
    patch:
      tags:
        - Users
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: edit user profile by userId
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            description: 'user id, you can use "me" shortcut.'
      requestBody:
        description: object containing the properties to edit user profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/generalEdit'
      responses:
        '200':
          description: return a user object
          content:
            application/json:
              schema:
                type: array
                $ref: '#/components/schemas/UserModelResponse'
    delete:
      tags:
        - Users
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: removes user
      operationId: removeUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            description: 'user id, you can use "me" shortcut.'
      responses:
        '204':
          description: Empty response
  /users/me/onboarding:
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Onboarding
      summary: Get onboarding status
      operationId: onboardingGet
      responses:
        '200':
          description: return a user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingResponse'
  /users/me/onboarding/showPopup:
    put:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Onboarding
      summary: Toggle onboarding show popup
      operationId: onboardingPutShowPopup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingPutShowPopup'
      responses:
        '200':
          description: return a user object
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
  '/users/{_id}/subscribers':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Subscribers
      summary: >-
        Gets `subscribers` from user. Returns IDs of users, who subscribed to
        user.
      operationId: getSubscribersById
      parameters:
        - in: path
          name: _id
          description: user _id
          required: true
          schema:
            type: string
            description: user _id
      responses:
        '200':
          description: returns subscribers ids for _id
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  '/users/{userId}/favorited':
    get:
      tags:
        - Users
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: get user's favorites users
      operationId: GetFavoriteUsers
      parameters:
        - name: userId
          description: 'user _id, ''me'' accepted too'
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return a list of users objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserModelResponse'
  '/users/{userId}/favorites':
    get:
      tags:
        - Users
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: get users who added to favorites
      operationId: GetUserUsersInFavorites
      parameters:
        - name: userId
          description: user _id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return a list of users object
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    username:
                      type: string
                    type:
                      type: string
  '/users/{userId}/favorites/{targetUser}':
    put:
      tags:
        - Users
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: put to favorites
      operationId: AddUserToFavorites
      parameters:
        - name: userId
          description: user _id
          in: path
          required: true
          schema:
            type: string
        - name: targetUser
          description: 'user _id, ''me'' accepted too'
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: return a list of users who added user to favorites
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    username:
                      type: string
                    type:
                      type: string
    delete:
      tags:
        - Users
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: delete from favorites
      operationId: DeleteUserFromFavorites
      parameters:
        - name: userId
          description: user _id
          in: path
          required: true
          schema:
            type: string
        - name: userId
          description: 'user _id, ''me'' accepted too'
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Empty response
  '/users/verify-email/{token}':
    post:
      tags:
        - Users
      summary: Verifies user email.
      operationId: verifyEmail
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
            description: 'restoration token, received in email'
      requestBody:
        description: object containing the properties to restore password
        content:
          application/json:
            schema:
              properties:
                client_id:
                  type: string
                client_secret:
                  type: string
      responses:
        '204':
          description: Empty response
  /users/resend-verification:
    put:
      tags:
        - Users
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: Resend token for email verification
      operationId: resendToken
      responses:
        '204':
          description: Empty response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModelResponse'
  '/users/reset/{token}':
    post:
      tags:
        - Users
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: Resets user password
      operationId: resetPassword
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
            description: 'restoration token, received in email'
      requestBody:
        description: object containing the properties to restore password
        content:
          application/json:
            schema:
              properties:
                newPassword:
                  type: string
      responses:
        '200':
          description: returns new token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oAuth'
  /users/forgot:
    post:
      tags:
        - Users
      summary: 'Initiates password restoration, sending reset code to email.'
      operationId: resendCode
      requestBody:
        description: object containing the properties to resend restoration code
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                client_id:
                  type: string
                client_secret:
                  type: string
      responses:
        '204':
          description: Empty response
  '/users/{userId}/change-password':
    post:
      tags:
        - Users
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: Resets user password.
      operationId: changePassword
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            description: User ID to change password
      requestBody:
        description: object containing the properties to change password
        content:
          application/json:
            schema:
              properties:
                password:
                  type: string
                newPassword:
                  type: string
      responses:
        '204':
          description: Empty response
  /users/logout:
    post:
      tags:
        - Users
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: Logout User
      operationId: logoutUser
      responses:
        '204':
          description: Empty response
  '/users/{userId}/generateFormUrl/{period}':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Users
      summary: Generates Form Url for subscription
      operationId: generateFormUrl
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            description: User ID for subscribing to
        - name: period
          in: path
          required: period
          schema:
            type: string
            enum:
              - 1
              - 30
              - 365
            description: Period for subscribing
      responses:
        '200':
          description: returns URL
          content:
            text/plain:
              schema:
                type: string
  '/users/{userId}/deposit/{summ}':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Users
      summary: Generates Form Url for deposit
      operationId: deposit
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            description: User ID for subscribing to
        - name: summ
          in: path
          required: period
          schema:
            type: integer
            description: Deposit summ
      responses:
        '200':
          description: returns URL
          content:
            text/plain:
              schema:
                type: string
  '/admin/users/{id}/ban':
    post:
      tags:
        - Users
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: ban user by id
      operationId: usersBan
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: user id.
      responses:
        '204':
          description: Empty response
  '/admin/users/{id}/unban':
    post:
      tags:
        - Users
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: unban user by id
      operationId: usersUnban
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: user id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                banningReasonDescription:
                  type: string
      responses:
        '204':
          description: Empty response
  '/users/{userId}/configs':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - UserConfigs
      summary: List all user configs
      operationId: userConfigsList
      responses:
        '200':
          description: return an array of usre config objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserConfigModelResponse'
    put:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - UserConfigs
      summary: Create user config
      operationId: createUserConfig
      parameters:
        - in: path
          name: userId
          description: user _id
          required: true
          schema:
            type: string
            description: user _id
      requestBody:
        description: object containing the properties to create user config
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserConfigModel'
      responses:
        '201':
          description: return created user config object
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/UserConfigModelResponse'
  '/users/{userId}/configs/{key}':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - UserConfigs
      summary: Returns user config by key
      operationId: getUserConfigs
      parameters:
        - in: path
          name: userId
          description: user _id
          required: true
          schema:
            type: string
            description: user _id
        - in: path
          name: key
          schema:
            type: string
          required: true
      responses:
        '200':
          description: returns user config by key
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/UserConfigModelResponse'
    delete:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - UserConfigs
      summary: Removes user config of current user
      operationId: deleteUserConfig
      parameters:
        - in: path
          name: userId
          description: user _id
          required: true
          schema:
            type: string
            description: user _id
        - in: path
          name: key
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Empty response
  '/videos/{_id}':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Videos
      summary: Returns video by _id
      operationId: getVideo
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: returns video by _id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/VideoModelResponseList'
  '/users/{user}/videos':
    get:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Videos
      summary: Returns array of videos of the specified user
      operationId: getUserVideos
      parameters:
        - in: path
          name: user
          description: 'user id, you can use "me" shortcut'
          required: true
          schema:
            type: string
            description: 'user id, you can use "me" shortcut'
      responses:
        '200':
          description: returns user's videos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VideoModelResponseList'
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Videos
      summary: Creates a video
      operationId: createVideo
      parameters:
        - in: path
          name: user
          description: 'user id, you can use "me" shortcut'
          required: true
          schema:
            type: string
            description: 'user id, you can use "me" shortcut'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/VideoModel'
      responses:
        '200':
          description: returns created video
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/VideoModelResponseCreated'
  '/users/{user}/videos/{videoId}':
    patch:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Videos
      summary: Updates video by _id
      operationId: updateVideo
      parameters:
        - in: path
          name: user
          description: 'user _id, ''me'' placeholder can be used'
          required: true
          schema:
            type: string
            description: 'user _id, ''me'' placeholder can be used'
        - in: path
          name: videoId
          description: video _id
          required: true
          schema:
            type: string
            description: video _id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/VideoModel'
      responses:
        '200':
          description: returns updated video
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/VideoModelResponseList'
    delete:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Videos
      summary: Removes video by _id. Video must be owned by user or admin
      operationId: deleteUserVideo
      parameters:
        - in: path
          name: user
          description: 'user _id, ''me'' placeholder can be used'
          required: true
          schema:
            type: string
            description: 'user _id, ''me'' placeholder can be used'
        - in: path
          name: videoId
          description: video _id
          required: true
          schema:
            type: string
            description: video _id
      responses:
        '204':
          description: Empty response
  '/videos/{_id}/purchase':
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Videos
      summary: Purchases a video
      operationId: videosPurchase
      parameters:
        - in: path
          name: _id
          description: video id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: returns sum
          content:
            application/json:
              schema:
                type: object
                properties:
                  sum:
                    type: number
  '/videos/{videoId}/inc/viewsCounter':
    post:
      security:
        - Bearer Token: []
        - OauthSecurity: []
      tags:
        - Videos
      summary: Increments views counter for a video
      operationId: increaseVideoViewsCounter
      parameters:
        - in: path
          name: videoId
          description: video _id
          required: true
          schema:
            type: string
            description: video _id
      responses:
        '204':
          description: Empty response
  '/admin/videos/{id}/ban':
    post:
      tags:
        - Videos
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: ban video by id
      operationId: videosBan
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: video id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                banningReasonType:
                  type: string
                  enum:
                    - abuse
                    - nudity
                    - spam
                banningReasonDescription:
                  type: string
      responses:
        '204':
          description: Empty response
  '/admin/videos/{id}/unban':
    post:
      tags:
        - Videos
      security:
        - Bearer Token: []
        - OauthSecurity: []
      summary: unban video by id
      operationId: videosUnban
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: video id.
      responses:
        '204':
          description: Empty response
components:
  schemas:
    DictionaryMetadata:
      type: object
      properties:
        id:
          type: string;
        name:
          type: string;
    UploadMultipartGetUploadUrlBody:
      type: object
      properties:
        key:
          type: string
        partNumber:
          type: number
          min: 1
        uploadId:
          type: string
    UploadMultipartGetUploadUrlResponse:
      type: object
      properties:
        data:
          type: string
          description: url to put chunk to
    UploadMultipartStartBody:
      type: object
      properties:
        type:
          type: string
          enum:
            - video
        fileType:
          type: string
          description: 'e.g: video/mp4'
    UploadMultipartStartResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            key:
              type: string
              description: path to access with
            uploadId:
              type: string
    UploadGetPresignedUrlBody:
      type: object
      properties:
        type:
          type: number
          enum:
            - avatar
        fileType:
          type: string
          description: 'e.g: image/jpg, video/mp4'
    UploadGetPresignedUrlResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            url:
              type: string
              description: url to access with
            signedUrl:
              type: string
              description: url to access with
    UploadMultipartCompleteBody:
      type: object
      properties:
        key:
          type: string
        parts:
          type: array
          items:
            type: object
            properties:
              ETag:
                type: string
              PartNumber:
                type: number
        uploadId:
          type: string
    UploadMultipartCompleteResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            Location:
              type: string
              description: full file URL location
            Bucket:
              type: string
            Key:
              type: string
              description: file location key
            ETag:
              type: string
              description: complete response ETag
    AlbumModel:
      type: object
      properties:
        name:
          type: string
        coverUrl:
          type: string
        price:
          type: integer
    AlbumModelResponseCreated:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        coverUrl:
          type: string
        price:
          type: integer
        photosCounter:
          type: integer
        viewsCounter:
          type: integer
        owner:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    AlbumModelResponseList:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        coverUrl:
          type: string
        price:
          type: integer
        photosCounter:
          type: integer
        viewsCounter:
          type: integer
        owner:
          type: object
          properties:
            _id:
              type: string
            username:
              type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    BalanceRecordResponse:
      type: object
      properties:
        _id:
          type: string
        owner:
          type: string
        type:
          type: string
          enum:
            - LoadBalance
            - PurchaseContent
            - SendTips
        sum:
          type: number
        ref:
          type: string
        refModel:
          type: string
          enum:
            - Album
            - Goal
            - LiveStream
            - Photo
            - Video
        createdAt:
          type: string
    ChatResponse:
      type: object
      properties:
        _id:
          type: string
        chatType:
          type: string
          enum:
            - private
            - liveStream
        metadata:
          type: object
        participants:
          type: array
          items:
            type: string
        messagesCounter:
          type: integer
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
    ChatResponseWithUnread:
      type: object
      properties:
        _id:
          type: string
        chatType:
          type: string
          enum:
            - private
            - liveStream
        metadata:
          type: object
        participants:
          type: array
          items:
            type: string
        messagesCounter:
          type: integer
        unreadMessagesCounter:
          type: integer
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
    CommentModel:
      type: object
      properties:
        body:
          type: string
    CommentModelResponseCreated:
      type: object
      properties:
        _id:
          type: string
        author:
          type: string
        target:
          type: string
        targetModel:
          type: string
        body:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    CommentModelResponse:
      type: object
      properties:
        _id:
          type: string
        author:
          type: object
          properties:
            _id:
              type: string
            username:
              type: string
        target:
          type: string
        targetModel:
          type: string
        body:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    FeedbackModel:
      type: object
      properties:
        body:
          type: string
        photoUrl:
          type: string
        type:
          type: string
          enum:
            - suggestion
            - supportRequest
    FeedbackModelResponseCreated:
      type: object
      properties:
        _id:
          type: string
        author:
          type: string
        body:
          type: string
        photoUrl:
          type: string
        type:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    FeedbackModelResponse:
      type: object
      properties:
        _id:
          type: string
        author:
          type: object
          properties:
            _id:
              type: string
            username:
              type: string
        body:
          type: string
        photoUrl:
          type: string
        type:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    GoalModel:
      type: object
      properties:
        title:
          type: string
        targetAmount:
          type: integer
        currentAmount:
          type: integer
        state:
          type: string
          enum:
            - active
            - completed
            - cancelled
        completedAt:
          type: string
    GoalModelResponseCreated:
      type: object
      properties:
        _id:
          type: string
        owner:
          type: string
        title:
          type: string
        targetAmount:
          type: integer
        currentAmount:
          type: integer
        state:
          type: string
        completedAt:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    GoalModelResponse:
      type: object
      properties:
        _id:
          type: string
        owner:
          type: object
          properties:
            _id:
              type: string
            username:
              type: string
        title:
          type: string
        targetAmount:
          type: integer
        currentAmount:
          type: integer
        state:
          type: string
        completedAt:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    LiveStreamModel:
      type: object
      properties:
        duration:
          type: integer
        coverUrl:
          type: string
        price:
          type: integer
        url:
          type: string
        publicUrl:
          type: string
    LiveStreamModelResponseCreated:
      type: object
      properties:
        _id:
          type: string
        duration:
          type: integer
        coverUrl:
          type: string
        price:
          type: integer
        url:
          type: string
        publicUrl:
          type: string
        likedUsersCounter:
          type: integer
        viewersCounter:
          type: integer
        likedUsers:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              username:
                type: string
        viewsCounter:
          type: integer
        createdAt:
          type: string
        updatedAt:
          type: string
        owner:
          type: string
        state:
          type: string
          enum:
            - created
            - scheduled
            - onAir
            - completed
    LiveStreamModelResponseList:
      type: object
      properties:
        _id:
          type: string
        duration:
          type: integer
        coverUrl:
          type: string
        price:
          type: integer
        url:
          type: string
        publicUrl:
          type: string
        owner:
          type: object
          properties:
            _id:
              type: string
            username:
              type: string
        state:
          type: string
          enum:
            - created
            - scheduled
            - onAir
            - completed
        likedUsersCounter:
          type: integer
        viewersCounter:
          type: integer
        likedUsers:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              username:
                type: string
        favoritedUsers:
          type: array
          items: string
        favoritedUsersCounter:
          type: integer
        viewsCounter:
          type: integer
        scheduledStartingAt:
          type: string
        scheduledAt:
          type: string
        startedAt:
          type: string
        stoppedAt:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    ChatMessageResponse:
      type: object
      properties:
        _id:
          type: string
        chat:
          type: string
        author:
          type: string
        body:
          type: string
        unread:
          type: array
          items:
            type: string
            description: _ids of unread users
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
    NotificationModelResponse:
      type: object
      properties:
        _id:
          type: string
        notificationType:
          type: string
          enum:
            - Testing
            - LiveStreamStarted
            - PrivateMessageReceived
            - VideoUploaded
        readable:
          type: boolean
        body:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    PhotoModel:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        isCover:
          type: string
        watermarkUrl:
          type: string
        watermarkOpacity:
          type: integer
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
        blurIntensity:
          type: integer
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
        url:
          type: string
        publicUrl:
          type: string
    PhotoModelResponse:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        isCover:
          type: string
        watermarkUrl:
          type: string
        watermarkOpacity:
          type: integer
        blurIntensity:
          type: integer
        url:
          type: string
        publicUrl:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        owner:
          type: object
          properties:
            _id:
              type: string
            username:
              type: string
        viewsCounter:
          type: integer
        album:
          type: object
          $ref: '#/components/schemas/AlbumModelResponse'
    ReportModel:
      type: object
      properties:
        author:
          type: string
        complainUser:
          type: string
        body:
          type: string
        photoUrl:
          type: string
    ReportModelResponse:
      type: object
      properties:
        author:
          type: object
          properties:
            _id:
              type: string
        complainUser:
          type: object
          properties:
            _id:
              type: string
        body:
          type: string
        photoUrl:
          type: string
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
    ReviewModel:
      type: object
      properties:
        author:
          type: string
        rating:
          type: integer
          minimum: 1
          maximum: 5
        body:
          type: string
    ReviewModelResponseCreated:
      type: object
      properties:
        _id:
          type: string
        author:
          type: string
        targetUser:
          type: string
        rating:
          type: integer
          minimum: 1
          maximum: 5
        body:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    ReviewModelResponse:
      type: object
      properties:
        _id:
          type: string
        author:
          type: object
          properties:
            _id:
              type: string
            username:
              type: string
        targetUser:
          type: object
          properties:
            _id:
              type: string
            username:
              type: string
        rating:
          type: integer
          minimum: 1
          maximum: 5
        body:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    RewardModel:
      type: object
      properties:
        reward:
          type: string
        description:
          type: string
        period:
          type: string
        place:
          type: integer
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 8
            - 9
            - 10
    RewardModelResponse:
      type: object
      properties:
        _id:
          type: string
        reward:
          type: string
        description:
          type: string
        period:
          type: string
        place:
          type: integer
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
    StrikeModel:
      type: object
      properties:
        creator:
          type: string
        targetUser:
          type: string
        type:
          type: string
          enum:
            - abuse
            - nudity
            - spam
        description:
          type: string
        ref:
          type: string
        state:
          type: string
          enum:
            - created
            - confirmed
            - revoked
    StrikeModelResponseList:
      type: object
      properties:
        _id:
          type: string
        creator:
          type: object
          properties:
            _id:
              type: string
            username:
              type: string
        targetUser:
          type: object
          properties:
            _id:
              type: string
            username:
              type: string
        type:
          type: string
          enum:
            - abuse
            - nudity
            - spam
        description:
          type: string
        ref:
          type: string
        state:
          type: string
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
    StrikeModelResponseCreated:
      type: object
      properties:
        _id:
          type: string
        creator:
          type: string
        targetUser:
          type: string
        type:
          type: string
          enum:
            - abuse
            - nudity
            - spam
        description:
          type: string
        state:
          type: string
        ref:
          type: string
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
    SystemNotificationModel:
      type: object
      properties:
        _id:
          type: string
        notificationType:
          type: string
          enum:
            - Testing
            - LiveStreamStarted
            - PrivateMessageReceived
            - VideoUploaded
        author:
          type: string
        sentAt:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    SystemNotificationModelList:
      type: object
      properties:
        _id:
          type: string
        notificationType:
          type: string
          enum:
            - Testing
            - LiveStreamStarted
            - PrivateMessageReceived
            - VideoUploaded
        author:
          type: object
          properties:
            _id:
              type: string
            username:
              type: string
        sentAt:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    UserModelRegister:
      type: object
      properties:
        client_id:
          type: string
        client_secret:
          type: string
        username:
          type: string
        password:
          type: string
        email:
          type: string
        emailVerified:
          type: boolean
        subscribers:
          type: array
          items:
            type: string
        type:
          type: string
          enum:
            - entrepreneur
            - investor
        socialMediaLinks:
          type: object
          properties:
            socialMedia:
              type: object
              properties:
                url:
                  type: 'string,'
        age:
          type: number
        entrepreneurType:
          type: string
          enum:
            - founder
            - employee
        arr:
          type: object
          properties:
            value1:
              type: 'number,'
            value2:
              type: 'number,'
            value3:
              type: 'number,'
            value4:
              type: 'number,'
        mrr:
          type: object
          properties:
            value1:
              type: 'number,'
            value2:
              type: 'number,'
        serviceType:
          type: string
        industry:
          type: string
        office:
          type: string
        region:
          type: string
        pitchDeck:
          type: string
    UserModelRegisterResponse:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        activeSubscriptionsCounter:
          type: number
          description: Counter for active subscriptions
        subscriptionsCounter:
          type: number
          description: 'Counter for all subscriptions, including canceled ones'
        socialMediaLinks:
          type: object
          properties:
            socialMedia:
              type: object
              properties:
                url:
                  type: 'string,'
        age:
          type: number
        entrepreneurType:
          type: string
          enum:
            - founder
            - employee
        arr:
          type: object
          properties:
            value1:
              type: 'number,'
            value2:
              type: 'number,'
            value3:
              type: 'number,'
            value4:
              type: 'number,'
        mrr:
          type: object
          properties:
            value1:
              type: 'number,'
            value2:
              type: 'number,'
        serviceType:
          type: string
        industry:
          type: string
        office:
          type: string
        region:
          type: string
        pitchDeck:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        auth:
          type: object
          $ref: '#/components/schemas/oAuth'
        _id:
          type: string
    UserModelRefreshToken:
      type: object
      properties:
        client_id:
          type: string
        client_secret:
          type: string
        grant_type:
          type: string
        refresh_token:
          type: string
    UserModelVerifyEmail:
      type: object
      properties:
        client_id:
          type: string
        client_secret:
          type: string
    UserModelResponse:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        type:
          type: string
          enum:
            - entrepreneur
            - investor
        about:
          type: string
        avatarUrl:
          type: string
        introVideoUrl:
          type: string
        fullName:
          type: string
        birthDate:
          type: string
        location:
          type: array
          items:
            type: integer
        subscribers:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/UserModelResponse'
        subscribersCounter:
          type: integer
        subscriptions:
          type: object
          properties:
            targetUser:
              type: 'string,'
            active:
              type: 'boolean,'
        subscriptionsCounter:
          type: number
        favoritedUsers:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/UserModelResponse'
        favoritedUsersCounter:
          type: integer
        socialMediaLinks:
          type: object
          properties:
            socialMedia:
              type: object
              properties:
                url:
                  type: 'string,'
        prices:
          type: array
          items:
            type: object
            properties:
              period:
                type: string
              price:
                type: number
        viewsCounter:
          type: integer
        notificationSettings:
          type: object
          properties:
            isEmailMuted:
              type: boolean
            isInAppMuted:
              type: boolean
        balance:
          type: number
        age:
          type: number
        entrepreneurType:
          type: string
          enum:
            - founder
            - employee
        arr:
          type: object
          properties:
            value1:
              type: 'number,'
            value2:
              type: 'number,'
            value3:
              type: 'number,'
            value4:
              type: 'number,'
        mrr:
          type: object
          properties:
            value1:
              type: 'number,'
            value2:
              type: 'number,'
        serviceType:
          type: string
        industry:
          type: string
        office:
          type: string
        region:
          type: string
        pitchDeck:
          type: string
        rating:
          type: number
        createdAt:
          type: string
        updatedAt:
          type: string
        suspendedAt:
          type: string
    oAuth:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        expires_in:
          type: integer
        token_type:
          type: string
    UserUpdateBody:
      type: object
      properties:
        about:
          type: string
        avatar:
          type: string
        introVideoUrl:
          type: string
    generalEdit:
      type: object
      properties:
        username:
          type: string
        about:
          type: string
        avatarUrl:
          type: string
        introVideoUrl:
          type: string
        fullName:
          type: string
        birthDate:
          type: string
        publicFields:
          type: object
          properties:
            fullName:
              type: boolean
            birthDate:
              type: boolean
            location:
              type: boolean
        location:
          type: array
          items:
            type: integer
    publicUser:
      type: array
      items:
        properties:
          _id:
            type: string
          username:
            type: string
          type:
            type: string
          avatarUrl:
            type: string
          fullName:
            type: string
          birthDate:
            type: string
          rating:
            type: number
    OnboardingPutShowPopup:
      type: object
      properties:
        socialMedia:
          type: boolean
          properties:
            showPopup:
              type: boolean
    OnboardingResponse:
      type: object
      properties:
        steps:
          type: object
          properties:
            shouldShowPopup:
              type: boolean
            items:
              type: object
              properties:
                payout:
                  type: object
                  $ref: '#/components/schemas/OnboardingItemObject'
                w9:
                  type: object
                  $ref: '#/components/schemas/OnboardingItemObject'
                stat:
                  type: object
                  $ref: '#/components/schemas/OnboardingItemObject'
                media:
                  type: object
                  $ref: '#/components/schemas/OnboardingItemObject'
                payment:
                  type: object
                  $ref: '#/components/schemas/OnboardingItemObject'
                about:
                  type: object
                  $ref: '#/components/schemas/OnboardingItemObject'
    OnboardingItemObject:
      type: object
      properties:
        isValid:
          type: boolean
        updatedAt:
          type: string
    UserCreationError:
      type: object
      properties:
        type:
          type: string
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        details:
          type: object
    UserConfigModel:
      type: object
      properties:
        user:
          type: string
        key:
          type: string
        data:
          type: object
    UserConfigModelResponse:
      type: object
      properties:
        user:
          type: string
        key:
          type: string
        data:
          type: object
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
    VideoModel:
      type: object
      properties:
        name:
          type: string
          required: true
        description:
          type: string
        price:
          type: integer
        duration:
          type: integer
        watermarkUrl:
          type: string
        watermarkOpacity:
          type: integer
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
        coverUrl:
          type: string
        url:
          type: string
          required: true
        publicUrl:
          type: string
    VideoModelResponseCreated:
      type: object
      properties:
        name:
          type: string
          required: true
        description:
          type: string
        price:
          type: integer
        duration:
          type: integer
        watermarkUrl:
          type: string
        watermarkOpacity:
          type: integer
        coverUrl:
          type: string
        url:
          type: string
          required: true
        publicUrl:
          type: string
        viewsCounter:
          type: integer
        commentsCounter:
          type: integer
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
        owner:
          type: string
    VideoModelResponseList:
      type: object
      properties:
        name:
          type: string
          required: true
        description:
          type: string
        price:
          type: integer
        duration:
          type: integer
        watermarkUrl:
          type: string
        watermarkOpacity:
          type: integer
        coverUrl:
          type: string
        url:
          type: string
          required: true
        publicUrl:
          type: string
        viewsCounter:
          type: integer
        commentsCounter:
          type: integer
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
        owner:
          type: object
          properties:
            _id:
              type: string
            username:
              type: string
  descriptions:
    AlbumsAdditionalPathsOne: |
      Additional paths:

        * /users/{userId}/albums/{_id},

        * /admin/albums/{_id},

        * /admin/users/{userId}/albums/{_id}
    AlbumsAdditionalPathsList: |
      Additional paths:

        * /users/{userId}/albums,

        * /admin/albums,

        * /admin/users/{userId}/albums
  securitySchemes:
    Bearer Token:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: You can obtain your token on /auth/login
    OauthSecurity:
      type: oauth2
      flows:
        password:
          refreshUrl: /oauth
          tokenUrl: /oauth
tags:
  - name: Albums
    description: Operations available to Albums model
  - name: Chats
    description: Operations available to Chats model
  - name: Comments
    description: Operations available to Comments model
  - name: Feedbacks
    description: Operations available to Feedbacks model
  - name: Goals
    description: Operations available to Goals model
  - name: LiveStreams
    description: Operations available to LiveStreams model
  - name: Messages
    description: Operations available to Messages model
  - name: Meta
    description: Operations available to meta data
  - name: Notifications
    description: Operations available to Notifications model
  - name: OAuth
    description: Operations available to OAuth
  - name: Onboarding
    description: Operations available to Onboarding
  - name: Photos
    description: Operations available to Photos model
  - name: Reports
    description: Operations available to Reports model
  - name: Rewards
    description: Operations available to Rewards model
  - name: Sessions
    description: Operations available to Sessions model
  - name: Strikes
    description: Operations available to Strikes model
  - name: Subscribers
    description: Operations available to Subscribers
  - name: Upload
    description: Operations available to file uploading
  - name: Users
    description: Operations available to User model
